# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  server:
    container_name: png-downloading-platform
    build:
      context: .
      dockerfile: /Dockerfile
    ports:
      - 8080:8080
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - DATABASE_HOST=db
      - DATABASE_PORT=5432
      - DATABASE_NAME=imalchemy
      - DATABASE_USERNAME=user
      - DATABASE_PASSWORD_FILE=/run/secrets/db-password
    depends_on:
      db:
        condition: service_healthy
    secrets:
      - db-password

  # The commented out section below is an example of how to define a PostgreSQL
  # database that your application can use. `depends_on` tells Docker Compose to
  # start the database before your application. The `db-data` volume persists the
  # database data between container restarts. The `db-password` secret is used
  # to set the database password. You must create `db/password.txt` and add
  # a password of your choosing to it before running `docker-compose up`.
  #     depends_on:
  #       db:
  #         condition: service_healthy
  db:
    image: postgres:17-alpine
    container_name: postgres_db_container
    restart: on-failure
    environment:
      - POSTGRES_DB=imalchemy
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
    ports:
      - 5432:5432
    secrets:
      - db-password
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ./data/db/postgres:/var/lib/postgresql/data

secrets:
  db-password:
    file: ./data/db/password.txt
